
@using HeroesOfLegends.Businsess.Models
@rendermode InteractiveServer
@inject IProfessionManager professionManager

<EditForm Enhance Model="@selectedProfession" OnValidSubmit="@HandleValidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <select id="professionSelect" @bind="ProfessionId">
        <option value="0">Nové</option>
        @foreach(var item in allProfessions)
        {
            <option value="@item.Id">@item.Name</option>
        }
    </select>

    <div class="form-group">
        <label for="name">ID: @selectedProfession.Id</label>
        
    </div>

    <div class="form-group">
        <label for="name">Název povolání</label>
        <InputText id="name" class="form-control" @bind-Value="selectedProfession.Name" />
        <ValidationMessage For="@(() => selectedProfession.Name)" />
    </div>

    <div class="form-group">
        <label for="description">Popis</label>
        <InputTextArea id="description" class="form-control" @bind-Value="selectedProfession.Description" />
        <ValidationMessage For="@(() => selectedProfession.Description)" />
    </div>

    <div class="form-group">
        <label for="level">Úroveň</label>
        <InputNumber id="level" class="form-control" @bind-Value="selectedProfession.Level" />
        <ValidationMessage For="@(() => selectedProfession.Level)" />
    </div>

    <div class="form-group">
        <label for="hpRangeMin">Životy Min</label>
        <InputNumber id="hpRangeMin" class="form-control" @bind-Value="selectedProfession.HpRangeMin" />
        <ValidationMessage For="@(() => selectedProfession.HpRangeMin)" />
    </div>

    <div class="form-group">
        <label for="hpRangeMax">Životy Max</label>
        <InputNumber id="hpRangeMax" class="form-control" @bind-Value="selectedProfession.HpRangeMax" />
        <ValidationMessage For="@(() => selectedProfession.HpRangeMax)" />
    </div>

    <div class="form-group">
        <label for="wizardMana">Kouzelnická Mana</label>
        <InputNumber id="wizardMana" class="form-control" @bind-Value="selectedProfession.WizardMana" />
        <ValidationMessage For="@(() => selectedProfession.WizardMana)" />
    </div>

    <div class="form-group">
        <label for="rengerMana">Hraničářská Mana</label>
        <InputNumber id="rengerMana" class="form-control" @bind-Value="selectedProfession.RengerMana" />
        <ValidationMessage For="@(() => selectedProfession.RengerMana)" />
    </div>

    <div class="form-group">
        <label for="alchemiMana">Alchemi Mana</label>
        <InputNumber id="alchemiMana" class="form-control" @bind-Value="selectedProfession.AlchemiMana" />
        <ValidationMessage For="@(() => selectedProfession.AlchemiMana)" />
    </div>

    <div class="form-group">
        <label for="specialdMana">Speciální Mana</label>
        <InputNumber id="specialdMana" class="form-control" @bind-Value="selectedProfession.SpecialdMana" />
        <ValidationMessage For="@(() => selectedProfession.SpecialdMana)" />
    </div>

    <div class="form-group form-check">
        <InputCheckbox id="hasWizardMana" class="form-check-input" @bind-Value="selectedProfession.HasWizardMana" />
        <label class="form-check-label" for="hasWizardMana">Má Kouzelnickou Manu</label>
    </div>

    <div class="form-group form-check">
        <InputCheckbox id="hasRengerMana" class="form-check-input" @bind-Value="selectedProfession.HasRengerMana" />
        <label class="form-check-label" for="hasRengerMana">Má Hraničářskou Manu</label>
    </div>

    <div class="form-group form-check">
        <InputCheckbox id="hasAlchemiMana" class="form-check-input" @bind-Value="selectedProfession.HasAlchemiMana" />
        <label class="form-check-label" for="hasAlchemiMana">Má Alchemi Manu</label>
    </div>

    <div class="form-group form-check">
        <InputCheckbox id="hasSpecialdMana" class="form-check-input" @bind-Value="selectedProfession.HasSpecialdMana" />
        <label class="form-check-label" for="hasSpecialdMana">Má Speciální Manu</label>
    </div>


    <button type="submit" class="btn btn-primary">Uložit</button>
    <button type="button" class="btn btn-primary" @onclick=RemoveProfession>Smaž</button>
</EditForm>

<h6>Novic_Skill_Ids</h6>
@foreach(var item in Novic_Skill_Ids)
{
    <p>@item</p>
}


@code {

    // ---- Input -----
    [Parameter]
    public List<int> Novic_Skill_Ids { get; set; } = new();
    [Parameter]
    public List<int> Advanced_Skill_Ids { get; set; } = new();
    [Parameter]
    public List<int> Expert_Skill_Ids { get; set; } = new();
    
    // ---- Output -----
    [Parameter]
    public EventCallback<List<int>> Novic_Skill_IdsChanged { get; set; }
    [Parameter]
    public EventCallback<List<int>> Advanced_Skill_IdsChanged { get; set; }
    [Parameter]
    public EventCallback<List<int>> Expert_Skill_IdsChanged { get; set; }

    // ---- Local -----
    private IEnumerable<ProfessionDto> allProfessions = new List<ProfessionDto>();
    private ProfessionDto selectedProfession = new ProfessionDto();
    private int ProfessionId
    {
        get => professionId;
        set
        {
            professionId = value;
            if(value==0)
            {
                selectedProfession = new ProfessionDto();
            }
            else
            {
                selectedProfession = allProfessions.FirstOrDefault(x => x.Id == value) ?? new ProfessionDto();
            }
            Novic_Skill_IdsChanged.InvokeAsync(selectedProfession.BeginnerSkillIds);
            Advanced_Skill_IdsChanged.InvokeAsync(selectedProfession.AdvancedSkillIds);
            Expert_Skill_IdsChanged.InvokeAsync(selectedProfession.ExpertSkillIds);
        }
    } // vybrané povolání
    private int professionId = 0;



    protected override void OnInitialized()
    {
        allProfessions = professionManager.GetAllData(); // načtení všech povolání
    }

    private async Task HandleValidSubmit()
    {
        selectedProfession.BeginnerSkillIds = Novic_Skill_Ids;
        selectedProfession.AdvancedSkillIds = Advanced_Skill_Ids;
        selectedProfession.ExpertSkillIds = Expert_Skill_Ids;

        if(selectedProfession.Id == 0)
        {
            await professionManager.AddDataAsync(selectedProfession);
            allProfessions =await professionManager.GetAllDataAsync();
        }
        else
        {
          await professionManager.UpdateDataAsync(selectedProfession,professionId);
        }

    }
    private async Task RemoveProfession()
    {
        await professionManager.DeleteDateAsync(selectedProfession.Id);
        selectedProfession = new ProfessionDto(); // Reset the form
        allProfessions = professionManager.GetAllData(); // Refresh the list of professions
        StateHasChanged(); // Re-render the page
    }

}
