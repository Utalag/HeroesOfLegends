@using System.ComponentModel.DataAnnotations;
@using System.Reflection;
@rendermode InteractiveServer

<div class="row">
    <div class="col-6">
        <h6>Primární atributy 1</h6>

        <!--Selected atribut-->
        <select @bind="Atribut_Selector1" name="PrimarAtribut1">
            @foreach(var atribut in selector1Dictionary)
            {
                <option value="@atribut.Key">@atribut.Value</option>
            }
        </select>

        <!--Selected value for atribut-->
        <select @bind="Selector1_Value" name="PrimarRange1">
            @foreach(var item in CharacterData.GetValuesForPrimaryAtrubute_Selector(CharacterData.PrimaryAtribut_1))
            {
                <option value="@item">@item - @(item+5)</option>
            }
        </select>
    </div>


    <div class=" col-6">
        <h6>Primární atributy 2</h6>
        <!--Selected atribut-->
        <select @bind="Atribut_Selector2" name="PrimarAtribut2">
            @foreach(var atribut in selector2Dictionary)
            {
                <option value="@atribut.Key">@atribut.Value</option>
            }
        </select>
        <!--Selected value for atribut-->
        <select @bind="Selector2_Value" name="PrimarRange2">
            @foreach(var item in CharacterData.GetValuesForPrimaryAtrubute_Selector(CharacterData.PrimaryAtribut_2))
            {
                <option value="@item">@item - @(item + 5)</option>
            }
        </select>
    </div>

</div>


@code {

    // //----------ENUM-----------

    // public string GetEnumDisplayName(Enum enumValue)
    // {
    //     return enumValue.GetType()
    //                     .GetMember(enumValue.ToString())
    //                     .FirstOrDefault()?
    //                     .GetCustomAttribute<DisplayAttribute>()?
    //                     .Name ?? enumValue.ToString();
    // }


    [Parameter]
    public CharacterDto CharacterData { get; set; }
    

    [Parameter]
    public EventCallback<CharacterDto> GetChatacterData { get; set; }


    // set selected atributes from the parent component (CZ: nastavení vybraných atributů z rodičovské komponenty)
    [Parameter]
    public ValueTuple<AtributEnum,AtributEnum>? SetAtribute { get; set; } = default; 
    
    //set the values from the parent component for Atributes (CZ: nastavení hodnot z rodičovské komponenty pro atributy)
    [Parameter]
    public ValueTuple<int,int>? SetIndexValue { get; set; } = default;



    private int index1_Atribut; // index for selector1 (CZ: index pro selektor1)
    private int index2_Atribut; // index for selector2 (CZ: index pro selektor2)

    private Dictionary<AtributEnum,string> selector1Dictionary = new Dictionary<AtributEnum,string>(); // selector1 and their values (CZ: selektor1 a jejich hodnoty)
    private Dictionary<AtributEnum,string> selector2Dictionary = new Dictionary<AtributEnum,string>(); // selector2 and their values (CZ: selektor2 a jejich hodnoty)


    protected override void OnInitialized()
    {

        // if the parent component has set values else initialize constant value (CZ: pokud rodičovská komponenta nastavila hodnoty jinak přednastaví výchozí hodonu)
        if(SetAtribute != null) 
        {
            CharacterData.PrimaryAtribut_1 = SetAtribute.Value.Item1; // set the values ​​from the parent component (CZ: nastavení hodnot z rodičovské komponenty)
            CharacterData.PrimaryAtribut_2 = SetAtribute.Value.Item2;

            CharacterData.PrimarValueIndex_1 = SetIndexValue.Value.Item1; // set the value from selector1 (CZ: nastavení hodnoty ze selektor1)
            CharacterData.PrimarValueIndex_2 = SetIndexValue.Value.Item2; // set the value from selector2 (CZ: nastavení hodnoty ze selektor2)
        }
        else
        {
            CharacterData.PrimaryAtribut_1 = AtributEnum.strength; // set the values ​​from the parent component (CZ: nastavení hodnot z rodičovské komponenty)
            CharacterData.PrimaryAtribut_2 = AtributEnum.agility;

            // default value index for selector (CZ: výchozí hodnota indexu pro selektor)
            CharacterData.PrimarValueIndex_1 = 0;
            // default value index for selector (CZ: výchozí hodnota indexu pro selektor)
            CharacterData.PrimarValueIndex_2 = 0;
            }
        Selector1_Value = CharacterData.GetValuesForPrimaryAtrubute_Selector(CharacterData.PrimaryAtribut_1).ElementAt(CharacterData.PrimarValueIndex_1);
        Selector2_Value = CharacterData.GetValuesForPrimaryAtrubute_Selector(CharacterData.PrimaryAtribut_2).ElementAt(CharacterData.PrimarValueIndex_2);
        selector1Dictionary = new(CharacterData.GetBaseAtributesDictionary());
        selector2Dictionary = new(CharacterData.GetBaseAtributesDictionary());
        selector2Dictionary.Remove(CharacterData.PrimaryAtribut_1);
        GetChatacterData.InvokeAsync(CharacterData);
    }


    // get and set the value of selector1 (CZ: získání a nastavení hodnoty selektoru1)
    private AtributEnum Atribut_Selector1
    {
        get => CharacterData.PrimaryAtribut_1;
        set
        {
            CharacterData.PrimaryAtribut_1 = value;
            Selector1Atribut(value);

        } 
    } 

    private void Selector1Atribut(AtributEnum input)
    {

        selector2Dictionary.Clear(); // clear the selector2 (CZ: vyčištění selektoru2
        index1_Atribut = selector1Dictionary.ToList().FindIndex(x => x.Key == input); // get the index of the selected value (CZ: získání indexu vybrané hodnoty)

        selector2Dictionary = new(CharacterData.GetBaseAtributesDictionary()); //copi Dictionary
        selector2Dictionary.Remove(input);  // remove 

        CharacterData.PrimaryAtribut_2 = selector2Dictionary.ElementAt(index2_Atribut).Key; //selects the value according to the original index from selector2 (CZ: vybere hodnotu podle původního indexu ze selektor2)
        GetChatacterData.InvokeAsync(CharacterData);
    }

    // get and set the value of selector2 (CZ: získání a nastavení hodnoty selektoru2)
    private AtributEnum Atribut_Selector2
    {
        get => CharacterData.PrimaryAtribut_2;
        set
        {
            CharacterData.PrimaryAtribut_2 = value;
            Selector2Atribut(value);
        }
    }

    private void Selector2Atribut(AtributEnum input)
    {
        index2_Atribut = selector2Dictionary.ToList().FindIndex(x => x.Key == input); // get the index of the selected value (CZ: získání indexu vybrané hodnoty)
        Selector2_Value = CharacterData.GetValuesForPrimaryAtrubute_Selector(CharacterData.PrimaryAtribut_2).ElementAt(CharacterData.PrimarValueIndex_2); // set the value from selector2 (CZ: nastavení hodnoty ze selektor2)                                                                                                                                         // GetAtributeSendParent.InvokeAsync(selectedAtributesForSendParent); // sending the current values ​​to the parent component (CZ: odeslání aktuálních hodnot rodičovské komponentě)                                                                                                                                      // GetAtributeValueSendParent.InvokeAsync(selectedValuesForSendParent); // sending the current values ​​to the parent component (CZ: odeslání aktuálních hodnot rodičovské komponentě))
        GetChatacterData.InvokeAsync(CharacterData);
    }


    //--------------------------------

    private int selector1Range; // value from selector1 (CZ: hodnota ze selektor1)
    private int selector2Range; // value from selector2 (CZ: hodnota ze selektor2)

    // selector Value (CZ: hodnota selektoru)
    private int Selector1_Value { get => selector1Range; set { selector1Range = value; Selector1RangeIndex(value); GetChatacterData.InvokeAsync(CharacterData); } }
    private int Selector2_Value { get => selector2Range; set { selector2Range = value; Selector2RangeIndex(value); GetChatacterData.InvokeAsync(CharacterData); } }

    //set index for selector1 (CZ: nastavení indexu pro selektor1)
    private void Selector1RangeIndex(int input)
    {
        CharacterData.PrimarValueIndex_1 = CharacterData.GetValuesForPrimaryAtrubute_Selector(CharacterData.PrimaryAtribut_1).ToList().FindIndex(x => x == input);
    }

    //set index for selector2 (CZ: nastavení indexu pro selektor2)
    private void Selector2RangeIndex(int input)
    {
        CharacterData.PrimarValueIndex_2 = CharacterData.GetValuesForPrimaryAtrubute_Selector(CharacterData.PrimaryAtribut_2).ToList().FindIndex(x => x == input);
    }

    


}