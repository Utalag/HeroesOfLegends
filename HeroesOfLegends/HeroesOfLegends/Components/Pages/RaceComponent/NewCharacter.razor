@using System.ComponentModel.DataAnnotations
@rendermode InteractiveServer

<hr />
<h5>Jmeno</h5>
<input type="text" @bind="character.Name" class="form-control" />
<hr />
<h5>Příběh</h5>
<input type="text" @bind="character.Description" class="form-control" />
<hr />
<h5>Zvolená rasa: </h5>
<label>@character.RaceId</label>
<hr />
<h5>1. Přednastavené povolání</h5>
<hr />
<h5>2. Primární dovednosti</h5>
<div> <!--PRIMÁRNÍ DOVEDNOSTI-->
    <SelectTwoAtributes 
        CharacterData="character"
        GetChatacterData="UpdateDataFromAtributeComponent"
        SetAtribute="(AtributEnum.intelligence,AtributEnum.constitution)"
        SetIndexValue="(1,1)" />

</div>
<hr />
<h5>3. Základní rozsahy</h5>
<div>


    <BitSlider Label="Síla" IsRanged="true" IsEnabled="false" 
               Step="1"Min="1"Max="21"
               RangeValue="@(new() { Lower = @character.StrengthFinalRange.Item1,
                                     Upper =  @character.StrengthFinalRange.Item2} )" />

    <BitSlider Label="Obratnost" IsRanged="true" IsEnabled="false"
               Step="1" Min="1" Max="21"
               RangeValue="@(new() { Lower = @character.AgilityFinalRange.Item1,
                                     Upper =  @character.AgilityFinalRange.Item2} )" />

    <BitSlider Label="Odolnost" IsRanged="true" IsEnabled="false"
               Step="1" Min="1" Max="21"
               RangeValue="@(new() { Lower = @character.ConstitutionFinalRange.Item1,
                                     Upper = @character.ConstitutionFinalRange.Item2} )" />
    <BitSlider Label="Inteligence" IsRanged="true" IsEnabled="false"
               Step="1" Min="1" Max="21"
               RangeValue="@(new() { Lower = @character.IntelligenceFinalRange.Item1,
                                     Upper = @character.IntelligenceFinalRange.Item2} )" />
    <BitSlider Label="Charisma" IsRanged="true" IsEnabled="false"
               Step="1" Min="1" Max="21"
               RangeValue="@(new() { Lower = @character.CharismaFinalRange.Item1,
                                     Upper = @character.CharismaFinalRange.Item2} )" />
    
   
</div>
<hr />
<h5>4. Hody kostkami</h5>
<div> <!--HODY KOSTKAMI-->
    <p>Součet hodů kostkami: <span>@sumAwerageDiceRolls</span></p>

    <button class="btn btn-primary" @onclick="RollDice_Random">Hodit kostkami</button>
    <button class="btn btn-primary" @onclick="AverageDiceRolls">Nastavit průměrné hody</button>

    <p>
        <br/>
       S: @character.Strength_DiceRoll
       O: @character.Agility_DiceRoll
       Od: @character.Constitution_DiceRoll
       I: @character.Intelligence_DiceRoll
       Ch: @character.Charisma_DiceRoll
        <br />
    </p>

    <p>
        Hody kostkou:
        @foreach(var item in awerageDiceRolls)
        {
            <span>@item ,</span>
        }
    </p>
    
</div>
<hr />
<h5>5. Přiřazení hodů</h5>




<BitSlider Label="Síla"
           Min="@character.StrengthFinalRange.Item1"
           Max="@character.StrengthFinalRange.Item2"
           OnChange="v => character.Strengt = (Convert.ToInt32(v.Value),0) " 
           />

<p>@character.Strengt</p>



<p>Obratnost: @character.AgilityFinalRange.Item1 - @character.AgilityFinalRange.Item2</p>
<p>Odolnost: @character.ConstitutionFinalRange.Item1 - @character.ConstitutionFinalRange.Item2</p>
<p>Inteligence: @character.IntelligenceFinalRange.Item1 - @character.IntelligenceFinalRange.Item2</p>
<p>Charisma: @character.CharismaFinalRange.Item1 - @character.CharismaFinalRange.Item2</p>





<MultiSlider/>

@code {


    

    protected override void OnInitialized()
    {
        character.RaceId = RaceData.RaceId;
        
    }


    // ------------------ ATRIBUT COMPONENT ----------------------------------
    CharacterDto character = new CharacterDto();
    [Parameter] public RaceDto? RaceData { get; set; }

    [Parameter] public IEnumerable<ProfessionDto?> ProfessionData { get; set; }

    private void UpdateDataFromAtributeComponent(CharacterDto characterDataFromAtributeComponent)
    {
        characterDataFromAtributeComponent.SetAllPrimaryAtributes(RaceData);
        
    }


    ////---------------- DICE ROLLS -----------------------------

    //------------------ RANDOM GENERATED DICE ROLL--------------------------

    private bool selectAtemGeneratedDiceRolls = false;
    private int numberOfAttempts = 3; //number of attempts for generated (Cz: počet pokusů pro generování)
    private int sumAttemp;
    private List<int> manySumAttepm = new List<int>();
    private List<int> oneGenerateListDiceRolls = new List<int>();
    private List<List<int>> manyAtemGeneratedDiceRolls = new List<List<int>>();

    private void RollDice_Random()
    {
        Random random = new Random();

        for(int j = 0;j < numberOfAttempts;j++)
        {
            sumAttemp = 0;
            oneGenerateListDiceRolls.Clear();
            for (int i = 0; i < character.NumberOfDiceRolls(); i++)
            {
                int nuber = random.Next(0,6) + 1;
                sumAttemp += nuber;
                oneGenerateListDiceRolls.Add(nuber);
            }
            manySumAttepm.Add(sumAttemp);
            manyAtemGeneratedDiceRolls.Add(oneGenerateListDiceRolls);
        }
    }

    //-------------------- AWERAGE DICE ROLL -------------------------------

    private bool selectAwerageDiceRolls = false;
    private int sumAwerageDiceRolls;
    private List<int> awerageDiceRolls = new List<int>();

    private void AverageDiceRolls()
    {
        sumAwerageDiceRolls = 0;
        awerageDiceRolls.Clear();
        for(int i = 0;i < character.NumberOfDiceRolls();i++)
        {
            sumAwerageDiceRolls += 4;
            awerageDiceRolls.Add(4);
        }
    }

    // ------------------- CUSTOM DICE ROLLS ------------------

    private bool selectCustomDiceRolls = false;
    private int sumCustomDiceRolls;


    [MaxLength(1)]
    private int number;
    private int numberOfDiceRolls = 0;

    private void CustomDiceRolls()
    {
        
    }








    // -------------------- OUTHER CODE------------------

    private string GetEnumDescription(Enum value)
    {
        var field = value.GetType().GetField(value.ToString());
        var attribute = (DescriptionAttribute)Attribute.GetCustomAttribute(field,typeof(DescriptionAttribute));
        return attribute == null ? value.ToString() : attribute.Description;
    }


    
}
